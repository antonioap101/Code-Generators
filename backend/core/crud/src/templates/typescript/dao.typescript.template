import {{ sequelize }} from './connection';

export class {ClassName}Dao {{
  static async insert({FieldParameters}): Promise<any> {{
    {ValidationCode}
    const query = `
      {InsertQuery}
    `;
    const values = [{InsertValues}];
    try {{
      const [result] = await sequelize.query(query, {{ replacements: values }});
      return result[0];
    }} catch (error) {{
      console.error('Error inserting record:', error);
      throw error;
    }}
  }}

  static async selectById(id: number): Promise<any> {{
    const query = `
      {SelectQuery}
    `;
    try {{
      const [result] = await sequelize.query(query, {{ replacements: [id] }});
      return result[0];
    }} catch (error) {{
      console.error('Error selecting record:', error);
      throw error;
    }}
  }}

  static async updateById(id: number, {FieldParameters}): Promise<any> {{
    {ValidationCode}
    const query = `
      {UpdateQuery}
    `;
    const values = [{UpdateValues}, id];
    try {{
      const [result] = await sequelize.query(query, {{ replacements: values }});
      return result[0];
    }} catch (error) {{
      console.error('Error updating record:', error);
      throw error;
    }}
  }}

  static async deleteById(id: number): Promise<void> {{
    const query = `
      {DeleteQuery}
    `;
    try {{
      await sequelize.query(query, {{ replacements: [id] }});
    }} catch (error) {{
      console.error('Error deleting record:', error);
      throw error;
    }}
  }}
}}
